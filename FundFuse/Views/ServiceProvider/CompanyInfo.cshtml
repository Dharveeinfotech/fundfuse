@model TMP.Models.ServiceProviderModel
@using CONT = TMP.Infrastructure.Web.StatusManager.OtherDetail.Constant;
@{
    ViewBag.Title = "Company Info";
    Layout = "~/Views/MasterPage/_defaultLayout.cshtml";
}


<div class="col-md-12 div-border-multitab padoff">
    @if (Model.CustomerID > 0)
    {
        @Html.Action("ServiceProviderPartialPage", "MasterPage", new { CustomerID = Model.CustomerID, _tab = 1 })
    }
    @using (Html.BeginForm("CompanyInfo", "ServiceProvider", FormMethod.Post, new { @class = "col-md-12 padoff CommonValidations" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Status)
        @Html.HiddenFor(model => model.CustomerID)
        @Html.HiddenFor(model => model.CustomerInfoID)
        @Html.HiddenFor(model => model.GetCityID)

        <div class="col-md-12 createusertitle">PRIMARY CONTACT INFORMATION</div>
        <div class="col-md-12" style="height:10px;"></div>
        <div class="form-group">
            <label class="col-md-2" for="textinput">Name of Contact Person&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.EditorFor(model => model.ContactFName, new { htmlAttributes = new { @class = "form-control validate[required,custom[onlyLetterSp]]", maxlength = "50", autocomplete = "off", placeholder = "First Name" } })
            </div>
            <div class="col-md-3">
                @Html.EditorFor(model => model.ContactMName, new { htmlAttributes = new { @class = "form-control validate[custom[onlyLetterSp]]", maxlength = "50", autocomplete = "off", placeholder = "Middle Name" } })
            </div>
            <div class="col-md-3">
                @Html.EditorFor(model => model.ContactLName, new { htmlAttributes = new { @class = "form-control validate[required,custom[onlyLetterSp]]", maxlength = "50", autocomplete = "off", placeholder = "Last Name" } })
            </div>
            <div class="col-md-1"></div>
        </div>
        
        <div class="form-group">
            <label class="col-md-2" for="textinput">Gender &nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.Gender, new SelectList(ViewBag.DDLGenderID, "value", "text", Model.Gender), "--Select--", new { @class = "form-control validate[required]" })
            </div>
            <div class="col-md-1"></div>
            <label class="col-md-2" for="textinput">Country of Residence &nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.LocCountryID, new SelectList(ViewBag.DDLCountryID, "CountryID", "CountryName", Model.LocCountryID), "--Select--", new { @class = "form-control validate[required]" })
            </div>
            <div class="col-md-1"></div>
        </div>

        <div class="form-group">
            <label class="col-md-2" for="textinput">Mobile Number&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control tel validate[required]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>
            <label class="col-md-2" for="textinput">Telephone Number&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.TelNo, new { @class = "form-control tel validate[required]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>
        </div>

        <div class="form-group">
            <label class="col-md-2" for="textinput">E-Mail&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.EmailID, new { @class = "form-control isEmailGood validate[required,custom[email]]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>

            <label class="col-md-2" for="textinput">Designation&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.DesignationID, new SelectList(ViewBag.DDLDesignationID, "DesignationID", "DesignationName", Model.DesignationID), "--Select--", new { @class = "form-control validate[required]" })
            </div>
            <div class="col-md-1"></div>
        </div>

        @* Other Designation *@
        <div class="form-group" id="DV_OtherDesignation" style="display:none;">
            <div class="col-md-6"></div>
            <label class="col-md-2" for="textinput">Other Designation&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.OtherDesignation, new { @class = "form-control validate[required]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>
        </div>


        <div class="col-md-12 createusertitle">COMPANY INFORMATION</div>
        <div class="col-md-12" style="height:10px;"></div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <label class="col-md-2" for="textinput">Name as on Trade License&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-9">
                @Html.TextBoxFor(model => model.CompanyName, new { @class = "form-control validate[required]", maxlength = "50", autocomplete = "off" })
            </div>
        </div>

            <div class="form-group">
                <label class="col-md-2" for="textinput">Type of Company &nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-9">
                    @Html.DropDownListFor(model => model.CompanyTypeID, new SelectList(ViewBag.DDLCompanyTypeID, "CompanyTypeID", "CompanyTypeName", Model.CompanyTypeID), "--Select--", new { @class = "form-control validate[required]" })
                </div>
            </div>

            <div class="form-group" style="display:none;" id="DV_OtherCompanyType">
                <label class="col-md-2" for="textinput">Other Type of Company&nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.OtherCompanyType, new { @class = "form-control validate[required]", maxlength = "50", autocomplete = "off" })
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2" for="textinput">Trade License Number&nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.TradeLicNo, new { @class = "form-control validate[required]", maxlength = "50", autocomplete = "off" })
                </div>
                <div class="col-md-1"></div>
                <label class="col-md-2" for="textinput">License Expiry Date&nbsp;<span style="color:red;width:50px;"></span></label>
                <div class="col-md-3">
                    @*@if (DateTime.Now.AddDays(CONT.DateExpireDay) > Convert.ToDateTime(Model.LicExpDate))
                        {
                            @Html.EditorFor(model => model.LicExpDate, new { htmlAttributes = new { @class = "form-control formattedCalender validate[required] DateExpire", maxlength = "50", autocomplete = "off" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.LicExpDate, new { htmlAttributes = new { @class = "form-control formattedCalender validate[required]", maxlength = "50", autocomplete = "off" } })
                        }*@
                    @if (Model.LicExpDate != null && Model.LicExpDate != Convert.ToDateTime("01-01-1900") && Model.LicExpDate != Convert.ToDateTime("01-01-0001"))
                    {
                    if (DateTime.Now.AddDays(CONT.DateExpireDay) > Convert.ToDateTime(Model.LicExpDate))
                    {
                            <input id="LicExpDate" name="LicExpDate" type="text" placeholder="" class="form-control formattedCalender validate[required] disbl-cntrl-cls DateExpire" autocomplete="off" value="@Convert.ToDateTime(Model.LicExpDate).ToString("dd-MMM-yyyy")">
                        }
                        else
                        {
                            <input id="LicExpDate" name="LicExpDate" type="text" placeholder="" class="form-control formattedCalender validate[required] disbl-cntrl-cls" autocomplete="off" value="@Convert.ToDateTime(Model.LicExpDate).ToString("dd-MMM-yyyy")">
                        }
                    }
                    else
                    {
                        <input id="LicExpDate" name="LicExpDate" type="text" placeholder="" class="form-control formattedCalender validate[required] disbl-cntrl-cls" autocomplete="off">
                    }
                </div>
                <div class="col-md-1"></div>
            </div>

            <div class="form-group">
                <label class="col-md-2" for="textinput">Place of Incorporation&nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.IncCountryID, new SelectList(ViewBag.DDLCountryID, "CountryID", "CountryName", Model.IncCountryID), "--Select--", new { @class = "form-control validate[required]" })
                </div>
                <div class="col-md-1"></div>
                <label class="col-md-2" for="textinput">Date of Incorporation&nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.IncDate, new { htmlAttributes = new { @class = "form-control formattedCalenderinc validate[required]", maxlength = "50", autocomplete = "off" } })
                </div>
                <div class="col-md-1"></div>
            </div>

            <div class="form-group">
                <label class="col-md-2" for="textinput">Company Address &nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-9">
                    @Html.TextBoxFor(model => model.Address, new { @class = "form-control validate[required]", maxlength = "50", autocomplete = "off" })
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2" for="textinput">Country&nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.CountryID, new SelectList(ViewBag.DDLCountryID, "CountryID", "CountryName", Model.CountryID), "--Select--", new { @class = "form-control validate[required]" })
                </div>
                <div class="col-md-1"></div>
                <label class="col-md-2" for="textinput">City &nbsp;<span style="color:red;width:50px;">*</span></label>
                <div class="col-md-3">
                    <select id="CityID" class="form-control validate[required]" name="CityID"></select>
                </div>
                <div class="col-md-1"></div>
            </div>


        // Other City Code
        <div class="form-group" style="display:none;" id="DV_OtherCity">
            <div class="col-md-6"></div>
            <label class="col-md-2" for="textinput">Other City &nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.OtherCity, new { @class = "form-control validate[required]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>
        </div>

        <div class="form-group">
            <label class="col-md-2" for="textinput">Telephone Number&nbsp;<span style="color:red;width:50px;">*</span></label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.TelNoInfo, new { @class = "form-control tel validate[required]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>
            <label class="col-md-2" for="textinput">Official Website (if available)</label>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.Website, new { @class = "form-control validate[custom[url]]", maxlength = "50", autocomplete = "off" })
            </div>
            <div class="col-md-1"></div>
        </div>

            <div class="form-group">
                <div class="col-md-8"></div>
                <div class="col-md-3" style="text-align:right;">
                    <button id="submit" name="submit" value="submit" type="submit" class="btn CommonAttachValidation btn-tgs">Save & Next</button>
                </div>
                <div class="col-md-1"></div>
            </div>
    }
</div>
<style>
    .error {
        border-color: #a94442 !important;
    }

        .error:focus {
            box-shadow: 0 0 2px #a94442 !important;
        }
</style>

<script>

    $("#submit").on("click", function () {
        var DtIncDate = $("#IncDate").val();
        if (DtIncDate == "") {
            document.getElementById("IncDate").className = document.getElementById("IncDate").className.replace("error ", "");
            document.getElementById("IncDate").className = "error " + document.getElementById("IncDate").className;
        } else {
            document.getElementById("IncDate").className = document.getElementById("IncDate").className.replace("error ", "");
            document.getElementById("IncDate").className = document.getElementById("IncDate").className.replace(" input-validation-error", "");
        }

        var DtLicExpDate = $("#LicExpDate").val();
        if (DtLicExpDate == "") {
            document.getElementById("LicExpDate").className = document.getElementById("LicExpDate").className.replace("error ", "");
            document.getElementById("LicExpDate").className = "error " + document.getElementById("LicExpDate").className;
        } else {
            document.getElementById("LicExpDate").className = document.getElementById("LicExpDate").className.replace("error ", "");
            document.getElementById("LicExpDate").className = document.getElementById("LicExpDate").className.replace(" input-validation-error", "");
        }

        var DtCityID = $("#CityID").val();
        var NationalityID = $("#NationalityID").val();
        if (NationalityID != "") {
            if (DtCityID == "0" || DtCityID == "") {
                document.getElementById("CityID").className = "error " + document.getElementById("CityID").className;
                return false;
            }
            else {
                document.getElementById("CityID").className = document.getElementById("CityID").className.replace("error ", "");
                $('#CityID').rules('remove');
            }
        }

        $('#IncDate').rules('remove');
        $('#LicExpDate').rules('remove');
    });

    $("#IncDate").on("change", function () {
        {
            document.getElementById("IncDate").className = document.getElementById("IncDate").className.replace("error ", "");
            document.getElementById("IncDate").className = document.getElementById("IncDate").className.replace(" input-validation-error", "");
        }
    });

    $("#LicExpDate").on("change", function () {
        {
            document.getElementById("LicExpDate").className = document.getElementById("LicExpDate").className.replace("error ", "");
            document.getElementById("LicExpDate").className = document.getElementById("LicExpDate").className.replace(" input-validation-error", "");
        }
    });

    $("#CityID").on("change", function () {
        {
            document.getElementById("CityID").className = document.getElementById("CityID").className.replace("error ", "");
            $('#CityID').rules('remove');
        }
    });

    var CountryID = $("#CountryID").val();
    if (CountryID != "") {
        //$.LoadingOverlay("show");
        $("#CityID").empty();
        $('#CityID').append($('<option></option>').val("0").html("-- Select --"));
        GetCity(CountryID);
        document.getElementById("CityID").className = document.getElementById("CityID").className.replace("error ", "");
        //setTimeout(function () {
        //    $.LoadingOverlay("hide");
        //}, 500);
    }
    else {
        $('#CityID').append($('<option></option>').val("0").html("-- Select --"));
        $('#CityID').val("0");
    }

    $("#CountryID").on("change", function () {
        $.LoadingOverlay("show");
        $('#DV_OtherCity').hide();
        var CountryID = $(this).val();
        $("#CityID").empty();
        $('#CityID').append($('<option></option>').val("0").html("-- Select --"));
        GetCity(CountryID);
        $("#CityID").focus();
        setTimeout(function () {
            $.LoadingOverlay("hide");
        }, 500);
    });

    function GetCity(CountryID) {
        $.ajax({
            url: "/ServiceProvider/GetCityData?CountryID=" + CountryID,
            type: "POST",
            data: "{}",
            datatype: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                $.each(data, function (i, City) {
                    $("#CityID").append(
                        $('<option></option>').val(City.CityID).html(City.CityName));
                });
                $('#CityID').val($("#GetCityID").val());
                $('#CityID').append($('<option></option>').val("00").html("Other"));

                document.getElementById("CityID").className = document.getElementById("CityID").className.replace("error ", "");
                document.getElementById("CityID").className = "error " + document.getElementById("CityID").className;

                var DtCityID = $("#CityID").val();
                if (DtCityID != 0) {
                    document.getElementById("CityID").className = document.getElementById("CityID").className.replace("error ", "");
                }
                if (DtCityID == null) {
                    document.getElementById("CityID").className = "error " + document.getElementById("CityID").className;
                }

                var OtherCity = $("#OtherCity").val();
                if (OtherCity != "" && typeof (OtherCity) != 'undefined') {
                    $("#CityID").val("00");
                }
                return false;
            },
        });
    }

    // Add Other Designation Code
    var DesignationID = $("#DesignationID").val();
    if (DesignationID != "") {
        AddOtherDesignation();
    }

    function AddOtherDesignation() {
        var IndustryID = $("#DesignationID").val();
        if (IndustryID != "") {
            var skillsSelect = document.getElementById("DesignationID");
            var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
            if (selectedText == "Other") {
                $('#DV_OtherDesignation').show();
                $("#OtherDesignation").focus();
            }
            else {
                $('#DV_OtherDesignation').hide();
                $("#OtherDesignation").val("");
            }
        }
    }

    $("#DesignationID").on("change", function () {
        AddOtherDesignation();
    });


    // Add Other City Code
    $("#CityID").on("change", function () {
        AddOtherCity();
    });

    var OtherCity = $("#OtherCity").val();
    if (OtherCity != "" && typeof (OtherCity) != 'undefined') {
        EditOtherCity();
    }

    function AddOtherCity() {
        var CityID = $("#CityID").val();
        if (CityID != "") {
            var skillsSelect = document.getElementById("CityID");
            var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
            if (selectedText == "Other") {
                $('#DV_OtherCity').show(); $("#OtherCity").val(""); $("#OtherCity").focus();
            }
            else {
                $('#DV_OtherCity').hide(); $("#OtherCity").val("");
            }
        }
    }

    function EditOtherCity() {
        var OtherCity = $("#OtherCity").val();
        if (OtherCity != "" && typeof (OtherCity) != 'undefined') {
            $('#DV_OtherCity').show(); $("#OtherCity").focus();

        }
        else { $('#DV_OtherCity').hide(); $("#OtherCity").val(""); }
    }

    // Add Other Company Type
    var CompanyTypeID = $("#CompanyTypeID").val();
    if (CompanyTypeID != "") {
        AddOtherCompanyType();
    }

    function AddOtherCompanyType() {
        var IndustryID = $("#CompanyTypeID").val();
        if (IndustryID != "") {
            var skillsSelect = document.getElementById("CompanyTypeID");
            var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
            if (selectedText == "Other") {
                $('#DV_OtherCompanyType').show();
                $("#OtherCompanyType").focus();
            }
            else {
                $('#DV_OtherCompanyType').hide();
                $("#OtherCompanyType").val("");
            }
        }
    }

    $("#CompanyTypeID").on("change", function () {
        AddOtherCompanyType();
    });
</script>