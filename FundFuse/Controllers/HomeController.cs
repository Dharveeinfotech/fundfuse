using TMP.DAL;
using TMP.Models;
using System;
using System.Data;
using System.Web.Mvc;
using System.Web;
using System.IO;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;

using CONT = TMP.Infrastructure.Web.StatusManager.OtherDetail.Constant;
using System.Web.Configuration;

namespace TMP.Controllers
{
    public class HomeController : Controller
    {
        #region Local Variable
        Function FN = new Function();
        Dashboard_Model DM = new Dashboard_Model();
        OSBDashboard DM1 = new OSBDashboard();
        ClsUserMaster db = new ClsUserMaster();
        ClsCustomerMaster _clsCust = new ClsCustomerMaster();
        ClsInvoiceTransaction _clsInvoi = new ClsInvoiceTransaction();
        ClsUserMaster _clsUser = new ClsUserMaster();
        string defaultPath = "/Files/ProfileImage/";
        #endregion
        [HttpPost]
        public ActionResult Return(FormCollection frm)
        {
            string Returnvalue = Request.Form["Returnvalue"];
            string Referencenumber = Request.Form["Referencenumber"];
            string FileType = Request.Form["FileType"];
            string Transactionnumber = Request.Form["Transactionnumber"];
            string ReturnStatus = Request.Form["ReturnStatus"];
            string ErrorMessage = Request.Form["ErrorMessage"];

            byte[] bytes = Convert.FromBase64String(Returnvalue);
            string path = Server.MapPath(@"~\\Files\\Upload\\");
            System.IO.FileStream stream = new FileStream(path + Referencenumber + ".pdf", FileMode.CreateNew);
            System.IO.BinaryWriter writer = new BinaryWriter(stream);
            writer.Write(bytes, 0, bytes.Length);
            writer.Close();
            return RedirectToAction("Index", "Home");
        }
        public ActionResult Index()
        {

            ////String s = @"";
            ////byte[] bytes = Convert.FromBase64String(s);
            ////string path = Server.MapPath(@"E:\\");


            ////String strFileName = "asd.pdf";
            ////System.IO.FileStream stream = new FileStream(path + strFileName, FileMode.CreateNew);
            ////System.IO.BinaryWriter writer = new BinaryWriter(stream);
            ////writer.Write(bytes, 0, bytes.Length);
            ////writer.Close();

            //string path = Server.MapPath("~\\Files\\Upload\\asdf.pdf");
            //using (StreamReader sr = new StreamReader(path))
            //{
            //    Byte[] bytes = System.IO.File.ReadAllBytes(path);
            //    String file = Convert.ToBase64String(bytes);
            //    return View();
            //}
            return View();
        }
        public ActionResult onSorting(string Sorting_Order)
        {

            ////String s = @"";
            ////byte[] bytes = Convert.FromBase64String(s);
            ////string path = Server.MapPath(@"E:\\");


            ////String strFileName = "asd.pdf";
            ////System.IO.FileStream stream = new FileStream(path + strFileName, FileMode.CreateNew);
            ////System.IO.BinaryWriter writer = new BinaryWriter(stream);
            ////writer.Write(bytes, 0, bytes.Length);
            ////writer.Close();

            //string path = Server.MapPath("~\\Files\\Upload\\asdf.pdf");
            //using (StreamReader sr = new StreamReader(path))
            //{
            //    Byte[] bytes = System.IO.File.ReadAllBytes(path);
            //    String file = Convert.ToBase64String(bytes);
            //    return View();
            //}
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);

            _InvObjModel.ProgramType = CONT.BothProgramType;

            //ViewBag.SortingName = String.IsNullOrEmpty(Sorting_Order) ? "Transaction_Number" : "";
            //ViewBag.SortingDate = Sorting_Order == "Product" ? "Product" : "Date";

            var students = from stu in _clsInvoi.InvoiceMaster_ListAll(_InvObjModel) select stu;
            switch (Sorting_Order)
            {
                case "Transaction_Number":
                    students = students.OrderByDescending(stu => stu.TranRefNo);
                    break;
                case "Product":
                    students = students.OrderBy(stu => stu.ProgramType);
                    break;
                case "Date_Description":
                    students = students.OrderByDescending(stu => stu.TranDate);
                    break;
                default:
                    students = students.OrderBy(stu => stu.StatusUserDesc);
                    break;
            }
           ViewBag.Transt = students.ToList();
           return View();
        }
        public ActionResult CMNDashboard()
        {
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
                Session["IsEditProfile"] = false;
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();

        }
        #region Deshboard Portfolio
        public JsonResult GetCustomerPortFolio(int CurrencyID)
        {
            InvoiceTransactionModel _ObjModel = new InvoiceTransactionModel();
            _ObjModel.CurrencyID = CurrencyID;
            _ObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
            var data = _clsInvoi.CustomerPortFolio(_ObjModel);
            return Json(data, JsonRequestBehavior.AllowGet);
        }
        public void FillCurrencyCombo()
        {
            InvoiceTransactionModel _ObjModel = new InvoiceTransactionModel();
            _ObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
            var SelectedData = _clsInvoi.Dashboard_BindCurrency(_ObjModel).FirstOrDefault();
            if (SelectedData != null)
                ViewBag.CurrencyID = new SelectList(_clsInvoi.Dashboard_BindCurrency(_ObjModel), "CurrencyId", "CurrencyCode", SelectedData.CurrencyID);
            else
                ViewBag.CurrencyID = new List<SelectListItem> { };
        }
        #endregion
        public PartialViewResult _AdminDashboard(bool divCust = false)
        {

            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.divCust = divCust;
            _InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();

            CustomerMasterModel _objModel = new CustomerMasterModel();
            _objModel.CustomerTypeIDs = CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID + "," + CONT.ObligorCustomerTypeID + "," + CONT.SupplierCustomerTypeID + "," + CONT.FunderCustomerTypeID + "," + CONT.PayableSupplierCustomerTypeID;
            ViewBag.CustRegi = _clsCust.CustomerMaster_ListAll(_objModel);


            _InvObjModel.ProgramType = CONT.BothProgramType;
            var invoiceListData = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            ViewBag.Transt = invoiceListData;
            DataSet ds = new DataSet();
            _InvObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel
            {
                Type = dataRow.Field<string>("Type"),
                CustomerID = dataRow.Field<int>("CustomerID"),
                ActionType = dataRow.Field<string>("ActionType"),
                Status = dataRow.Field<string>("Status"),
                CustomerTypeID = dataRow.Field<int>("CustomerTypeID"),
                ProgramType = dataRow.Field<string>("ProgramType"),
                InvoiceID = dataRow.Field<int>("InvoiceID"),
            }).ToList();

            var TotObligorData = ds.Tables[1].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { TotObligor = dataRow.Field<int>("TotObligor") }).FirstOrDefault();
            ViewBag.TotObligor = TotObligorData.TotObligor;
            var TotSupplierData = ds.Tables[1].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { TotSupplier = dataRow.Field<int>("TotSupplier") }).FirstOrDefault();
            ViewBag.TotSupplier = TotSupplierData.TotSupplier;
            var TotFunderData = ds.Tables[1].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { TotFunder = dataRow.Field<int>("TotFunder") }).FirstOrDefault();
            ViewBag.TotFunder = TotFunderData.TotFunder;
            var TotInsurance = ds.Tables[1].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { TotInsurance = dataRow.Field<int>("TotInsurance") }).FirstOrDefault();
            ViewBag.TotInsurance = TotInsurance.TotInsurance;
            ViewBag.CurrencyList = ds.Tables[3].AsEnumerable().Select(dataRow => new InvoiceTransactionModel
            {
                CurrencyCode = dataRow.Field<string>("CurrencyCode")
            }).GroupBy(model => model.CurrencyCode).Select(group => group.First());
            ViewBag.StatusList = invoiceListData.Select(dataRow => new InvoiceTransactionModel
            {
                StatusUserDesc = dataRow.StatusUserDesc
            }).GroupBy(model => model.StatusUserDesc).Select(group => group.First());
            ViewBag.Pending = _clsInvoi.InvoiceMaster_ListAllPenSettlement(_InvObjModel);
            ViewBag.AllSettlement = _clsInvoi.InvoiceMaster_ListAllSettlement(_InvObjModel);

            FillCurrencyCombo();
            return PartialView();
        }
        public PartialViewResult _ReminderAlert()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            DataSet ds = new DataSet();
            _InvObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel
            {
                Type = dataRow.Field<string>("Type"),
                CustomerID = dataRow.Field<int>("CustomerID"),
                ActionType = dataRow.Field<string>("ActionType"),
                Status = dataRow.Field<string>("Status"),
                CustomerTypeID = dataRow.Field<int>("CustomerTypeID"),
                ProgramType = dataRow.Field<string>("ProgramType"),
                InvoiceID = dataRow.Field<int>("InvoiceID"),
            }).ToList();
            return PartialView();
        }
        public PartialViewResult _SupplierDashboard(bool HideBtn = false)
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.HideBtn = HideBtn;
            _InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();

            _InvObjModel.ProgramType = CONT.FType;
            _InvObjModel.ObligorGen = -1; /* Change for bulk upload Checker */
            _InvObjModel.CustomerID = _InvObjModel.SupplierID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.Transt = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            _InvObjModel.ObligorGen = 1; /*_InvObjModel.Status = CONT.supplier_Maker_Action;* Change for bulk upload Checker */
            ViewBag.ObligorUpd = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            DataSet ds = new DataSet();
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();

            ViewBag.Obligors = _clsInvoi.CustomerObligorDetail_ListAll(_InvObjModel).ToList();
            FillCurrencyCombo();
            return PartialView();
        }
        public PartialViewResult _ObligorDashboard(bool HideBtn = false)
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.HideBtn = HideBtn;
            _InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();

            _InvObjModel.ProgramType = CONT.FType;

            _InvObjModel.CustomerID = _InvObjModel.ObligorID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.FTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            DataSet ds = new DataSet();
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();

            ViewBag.Suppliers = _clsInvoi.CustomerObligorDetail_ListAll(_InvObjModel).ToList();
            FillCurrencyCombo();
            return PartialView();
        }
        public PartialViewResult _FunderDashboard(bool HideBtn = false)
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.HideBtn = HideBtn;
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            if (ViewBag._currentUser.IsChecker || ViewBag._currentUser.IsMaker)
            {
                _InvObjModel.ProgramType = CONT.BothProgramType;
                _InvObjModel.Status = _currentStatus();
                ViewBag.Fund = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            }
            _InvObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
            DataSet ds = new DataSet();
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();

            CustomerMasterModel _objCustModel = new CustomerMasterModel();
            _objCustModel.CustomerTypeIDs = CONT.ObligorCustomerTypeID + "," + CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID;
            _objCustModel.Status = CONT.ddstatus;
            ViewBag.ObligorsBuyers = _clsCust.CustomerMaster_ListAll(_objCustModel).ToList();
            FillCurrencyCombo();
            return PartialView();
        }
        public PartialViewResult _InsuranceDashboard(bool HideBtn = false)
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.HideBtn = HideBtn;
            //_InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();

            _InvObjModel.ProgramType = CONT.BothProgramType;
            if (ViewBag._currentUser.IsMaker)
            {
                _InvObjModel.Status = CONT.insurance_Maker_Action;
                ViewBag.MTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            }
            if (ViewBag._currentUser.IsChecker)
            {
                _InvObjModel.Status = CONT.insurance_Checker_Action;
                ViewBag.CTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            }
            _InvObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
            DataSet ds = new DataSet();
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();

            //CustomerMasterModel _objCustModel = new CustomerMasterModel();
            //_objCustModel.CustomerTypeIDs = CONT.ObligorCustomerTypeID + "," + CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID;
            //_objCustModel.Status = CONT.ddstatus;
            //ViewBag.ObligorsBuyers = _clsCust.CustomerMaster_ListAll(_objCustModel).ToList();
            _InvObjModel.CompanyID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.ObligorsBuyers = _clsInvoi.CustomerObligorDetail_ListAll(_InvObjModel).ToList();
            FillCurrencyCombo();
            return PartialView();
        }
        public PartialViewResult _BuyerDashboard(bool HideBtn = false)
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.HideBtn = HideBtn;
            _InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();

            _InvObjModel.ProgramType = CONT.RType;
            if (Convert.ToInt32(Session["onlineCustomerTypeID"]) == CONT.PayableSupplierCustomerTypeID)
            {
                _InvObjModel.CustomerID = _InvObjModel.SupplierID = Convert.ToInt32(Session["CustomerID"]);
            }
            else
            {
                _InvObjModel.CustomerID = _InvObjModel.BuyerID = Convert.ToInt32(Session["CustomerID"]);
            }
            ViewBag.RTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            DataSet ds = new DataSet();
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();

            //ViewBag.Obligors = _clsInvoi.CustomerObligorDetail_ListAll(_InvObjModel).ToList();

            CustomerMasterModel _objCustModel = new CustomerMasterModel();
            _objCustModel.CustomerTypeID = CONT.PayableSupplierCustomerTypeID;
            _objCustModel.Status = CONT.ddstatus;
            ViewBag.Obligors = _clsCust.CustomerMaster_ListAll(_objCustModel).ToList();

            FillCurrencyCombo();
            return PartialView();
        }
        public PartialViewResult _BothDashboard(bool HideBtn = false)
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            ViewBag.HideBtn = HideBtn;
            _InvObjModel.Status = _currentStatus();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.CustomerID = _InvObjModel.ObligorBuyerID = Convert.ToInt32(Session["CustomerID"]);

            _InvObjModel.ProgramType = CONT.FType;
            ViewBag.FTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            _InvObjModel.ProgramType = CONT.RType;
            ViewBag.RTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            DataSet ds = new DataSet();
            ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
            ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();
            ViewBag.Obligors = _clsInvoi.CustomerObligorDetail_ListAll(_InvObjModel).ToList();
            FillCurrencyCombo();
            return PartialView();
        }
        public ActionResult Transactions()
        {
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {

            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();

        }
        public ActionResult Portfolio()
        {
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {

            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();

        }
        public PartialViewResult _AdminPortFolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.ProgramType = CONT.BothProgramType;
            var invoiceListData = _clsInvoi.InvoiceMaster_ListAllPenSettlement(_InvObjModel);
            ViewBag.Pending = invoiceListData;
            ViewBag.CurrencyList = invoiceListData.Select(dataRow => new InvoiceTransactionModel
            {
                CurrencyCode = dataRow.CurrencyCode
            }).GroupBy(model => model.CurrencyCode).Select(group => group.First());
            ViewBag.StatusList = invoiceListData.Select(dataRow => new InvoiceTransactionModel
            {
                StatusUserDesc = dataRow.StatusUserDesc
            }).GroupBy(model => model.StatusUserDesc).Select(group => group.First());
            ViewBag.UploadTypeList = invoiceListData.Select(dataRow => new InvoiceTransactionModel
            {
                UploadType = dataRow.UploadType
            }).GroupBy(model => model.UploadType).Select(group => group.First());
            return PartialView();
        }
        public PartialViewResult _SupplierPortFolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.ProgramType = CONT.FType;
            _InvObjModel.CustomerID = _InvObjModel.SupplierID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.Transt = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            return PartialView();
        }
        public PartialViewResult _ObligorPortfolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();

            _InvObjModel.ProgramType = CONT.FType;

            _InvObjModel.CustomerID = _InvObjModel.ObligorID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.FTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            _InvObjModel.ObligorGen = 1; _InvObjModel.Status = CONT.Supplier_Maker;
            ViewBag.ObligorUpd = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);

            return PartialView();
        }
        public PartialViewResult _FunderPortfolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.ProgramType = CONT.BothProgramType;
            _InvObjModel.FunderID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.Transt = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            return PartialView();
        }
        public PartialViewResult _InsurancePortfolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.InsuranceID = Convert.ToInt32(Session["CustomerID"]);
            _InvObjModel.ProgramType = CONT.BothProgramType;
            ViewBag.MTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            return PartialView();
        }
        public PartialViewResult _BuyerPortfolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.ProgramType = CONT.RType;
            _InvObjModel.CustomerID = _InvObjModel.BuyerID = Convert.ToInt32(Session["CustomerID"]);
            ViewBag.RTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            return PartialView();
        }
        public PartialViewResult _BothPortfolio()
        {
            InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
            _InvObjModel.Status = _currentStatusAll();
            _InvObjModel.UserID = Convert.ToInt32(Session["UserID"]);
            ViewBag._currentUser = _clsInvoi.UserRole_GetDetail(_InvObjModel).FirstOrDefault();
            _InvObjModel.CustomerID = _InvObjModel.ObligorBuyerID = Convert.ToInt32(Session["CustomerID"]);
            _InvObjModel.ProgramType = CONT.BothProgramType;
            ViewBag.FTranst = _clsInvoi.InvoiceMaster_ListAll(_InvObjModel);
            return PartialView();
        }
        public ActionResult BlankDashboard()
        {
            CustomerMasterModel _ObjModel = new CustomerMasterModel();
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
               
                _ObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
                _ObjModel = _clsCust.CustomerMaster_ListAll(_ObjModel).FirstOrDefault();
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View(_ObjModel);

        }
        public PartialViewResult UserViewOnly(int CustomerID = 0)
        {
            CustomerMasterModel _objModel = new CustomerMasterModel();
            CustomerInfoModel _objinfoModel = new CustomerInfoModel();
            _objModel.CustomerID = CustomerID;
            _objModel = _clsCust.CustomerMasterHistory_ListAllBind(_objModel).FirstOrDefault();

            _objinfoModel.CustomerID = CustomerID;
            _objinfoModel = _clsCust.CustomerInfoDetailHistory_ListAllBind(_objinfoModel).FirstOrDefault();

            _objinfoModel.CustomerID = CustomerID;
            ViewBag.CreditDetails = _clsCust.CustomerBankCreditDetailHistory_ListAllBind(_objinfoModel);

            CustomerBankAccDetail _objBankModel = new CustomerBankAccDetail();
            _objBankModel.CustomerID = CustomerID;
            ViewBag.BankAccDetail = _clsCust.CustomerBankAccDetailHistory_ListAllBind(_objBankModel);

            CustomerShareHolderModel _objShareModel = new CustomerShareHolderModel();
            _objShareModel.CustomerID = CustomerID;
            _objShareModel.CustType = "A,D";
            ViewBag.AuthUser = _clsCust.CustomerShareHoldDetailHistory_ListAllBind(_objShareModel);

            _objShareModel.CustType = "S";
            ViewBag.ShareIndi = _clsCust.CustomerShareHoldDetailHistory_ListAllBind(_objShareModel);

            _objShareModel.CustType = "C";
            ViewBag.ShareComp = _clsCust.CustomerShareHoldDetailHistory_ListAllBind(_objShareModel);


            _objShareModel.CustType = "B";
            _objShareModel.ParentID = -1;
            ViewBag.ShareBene = _clsCust.CustomerShareHoldDetailHistory_ListAllBind(_objShareModel);

            UserMaster_ListAll_Result _objUserMaster = new UserMaster_ListAll_Result();
            _objUserMaster.CustomerID = CustomerID;
            ViewBag.UserDetail = _clsUser.UserMasterHistory_ListAllBind(_objUserMaster).ToList();

            CustomerSupplierModel _objSupplier = new CustomerSupplierModel();
            _objSupplier.CustomerID = CustomerID;
            ViewBag.Supplier = _clsCust.CustomerSupplierDetailHistory_ListAllBind(_objSupplier);

            _objSupplier.CustomerID = CustomerID;
            _objSupplier.IsCustomerSupp = true;
            ViewBag.ExpoBankDetail = _clsCust.ExpoCustomerBankAccDetailHistory_ListAllBind(_objSupplier);

            var tupleModel = new Tuple<CustomerMasterModel, CustomerInfoModel>(_objModel, _objinfoModel);
            return PartialView(tupleModel);
        }
        public ActionResult DocumentReminder()
        {
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
                DataSet ds = new DataSet();
                InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
                _InvObjModel.CustomerID = Convert.ToInt32(Session["CustomerID"]);
                ds = _clsInvoi.CustomerDashboardTable(_InvObjModel);
                ViewBag.reminder = ds.Tables[0].AsEnumerable().Select(dataRow => new InvoiceTransactionModel { Type = dataRow.Field<string>("Type"), ExpDate = dataRow.Field<DateTime>("ExpDate") }).ToList();
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();

        }
        public ActionResult ObligorSupplier()
        {
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
                DataSet ds = new DataSet();
                InvoiceTransactionModel _InvObjModel = new InvoiceTransactionModel();
                //if (Convert.ToInt32(Session["onlineCustomerTypeID"]) == CONT.ObligorCustomerTypeID)
                //{
                //    _InvObjModel.ObligorID = Convert.ToInt32(Session["CustomerID"]);
                //}
                //else if (Convert.ToInt32(Session["onlineCustomerTypeID"]) == CONT.SupplierCustomerTypeID)
                //{
                //    _InvObjModel.SupplierID = Convert.ToInt32(Session["CustomerID"]);
                //}
                //else if (Convert.ToInt32(Session["onlineCustomerTypeID"]) == CONT.BuyerCustomerTypeID)
                //{
                //    _InvObjModel.BuyerID = Convert.ToInt32(Session["CustomerID"]);
                //}
                //else if (Convert.ToInt32(Session["onlineCustomerTypeID"]) == CONT.BothObligorAndBuyerTypeID)
                //{
                //    _InvObjModel.ObligorBuyerID = Convert.ToInt32(Session["CustomerID"]);
                //}
                _InvObjModel.CompanyID = Convert.ToInt32(Session["CustomerID"]);
                ViewBag.Obligors = _clsInvoi.CustomerObligorDetail_ListAll(_InvObjModel).ToList();
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();

        }

        public ActionResult Notifications()
        {
            List<MenuRoleRights> MenuRole = new List<MenuRoleRights>().ToList();
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
                try
                {
                    ClsMenuRoleRights db = new ClsMenuRoleRights();
                    if (!string.IsNullOrEmpty(Session["RoleId"].ToString()))
                    {
                        int UserId = 0;
                        int.TryParse(LoginStatus[1].ToString(), out UserId);

                        string RoleId = Session["RoleId"].ToString();
                        MenuRole = db.MenuRoleRights_ListAll(RoleId, 0, 0, FN.UserRoletatus()).ToList();

                        if (MenuRole.Count > 0)
                        {
                            foreach (var pitem in MenuRole)
                            {
                                if (pitem.MenuName == "Registration")
                                {
                                    int a = 0;
                                    foreach (var item in MenuRole)
                                    {
                                        #region ADMINISTRATION CODE
                                        if (item.MenuName == "Registration")
                                        {
                                            int AA = 0;
                                            foreach (var subitem in MenuRole)
                                            {
                                                if (item.MenuID == subitem.ParentMenuID)
                                                {
                                                    string menuname = subitem.MenuName;
                                                    if (menuname == "Admin")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ServiceProviderModel _objServiceProviderModel = new ServiceProviderModel();
                                                                        ClsServiceProvider _ClsServiceProvider = new ClsServiceProvider();
                                                                        _objServiceProviderModel.CustomerID = 0;
                                                                        _objServiceProviderModel.CustomerTypeID = CONT.ServiceProviderCustomerTypeID;
                                                                        _objServiceProviderModel.Status = CONT.Home_statusMaker;
                                                                        ViewBag.ServiceProviderMakerMenuID = innitem.MenuID;
                                                                        ViewBag.ServiceProviderMaker = _ClsServiceProvider.CustomerMaster_ListAll(_objServiceProviderModel);
                                                                        if (ViewBag.ServiceProviderMaker.Count > 0)
                                                                        {
                                                                            AA = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ServiceProviderModel _objServiceProviderModel = new ServiceProviderModel();
                                                                        ClsServiceProvider _ClsServiceProvider = new ClsServiceProvider();
                                                                        _objServiceProviderModel.CustomerID = 0;
                                                                        _objServiceProviderModel.CustomerTypeID = CONT.ServiceProviderCustomerTypeID;
                                                                        _objServiceProviderModel.Status = CONT.Home_statusChecker;
                                                                        ViewBag.ServiceProviderCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.ServiceProviderChecker = _ClsServiceProvider.CustomerMasterHistory_ListAllBind(_objServiceProviderModel);

                                                                        if (ViewBag.ServiceProviderChecker.Count > 0)
                                                                        {
                                                                            AA = 1;
                                                                        }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ServiceProviderModel _objServiceProviderModel = new ServiceProviderModel();
                                                                        ClsServiceProvider _ClsServiceProvider = new ClsServiceProvider();
                                                                        _objServiceProviderModel.CustomerID = 0;
                                                                        _objServiceProviderModel.CustomerTypeID = CONT.ServiceProviderCustomerTypeID;
                                                                        _objServiceProviderModel.Status = CONT.Home_statusApprover;
                                                                        ViewBag.ServiceProviderApproverMenuID = innitem.MenuID;
                                                                        ViewBag.ServiceProviderApprover = _ClsServiceProvider.CustomerMasterHistory_ListAllBind(_objServiceProviderModel);
                                                                        if (ViewBag.ServiceProviderApprover.Count > 0)
                                                                        {
                                                                            AA = 1;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (menuname == "Insurance Provider")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ServiceProviderModel _objModel = new ServiceProviderModel();
                                                                        ClsServiceProvider _ClsServiceProvider = new ClsServiceProvider();
                                                                        _objModel.CustomerTypeIDs = CONT.InsuranceProviderTypeID + "," + CONT.InsuranceBrokerTypeID;
                                                                        _objModel.Status = CONT.Home_statusMaker;
                                                                        ViewBag.InsuranceProviderMakerMenuID = innitem.MenuID;
                                                                        ViewBag.InsuranceProviderMaker = _ClsServiceProvider.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.InsuranceProviderMaker.Count > 0)
                                                                        {
                                                                            AA = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ServiceProviderModel _objModel = new ServiceProviderModel();
                                                                        ClsServiceProvider _ClsServiceProvider = new ClsServiceProvider();
                                                                        _objModel.CustomerTypeIDs = CONT.InsuranceProviderTypeID + "," + CONT.InsuranceBrokerTypeID;
                                                                        _objModel.Status = CONT.Home_statusChecker;
                                                                        ViewBag.InsuranceProviderCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.InsuranceProviderChecker = _ClsServiceProvider.CustomerMasterHistory_ListAllBind(_objModel);

                                                                        if (ViewBag.InsuranceProviderChecker.Count > 0)
                                                                        {
                                                                            AA = 1;
                                                                        }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ServiceProviderModel _objModel = new ServiceProviderModel();
                                                                        ClsServiceProvider _ClsServiceProvider = new ClsServiceProvider();
                                                                        _objModel.CustomerTypeIDs = CONT.InsuranceProviderTypeID + "," + CONT.InsuranceBrokerTypeID;
                                                                        _objModel.Status = CONT.Home_statusApprover;
                                                                        ViewBag.InsuranceProviderApproverMenuID = innitem.MenuID;
                                                                        ViewBag.InsuranceProviderApprover = _ClsServiceProvider.CustomerMasterHistory_ListAllBind(_objModel);

                                                                        if (ViewBag.InsuranceProviderApprover.Count > 0)
                                                                        {
                                                                            AA = 1;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            if (AA == 0)
                                            {
                                                ViewBag.AdministrationCheckData = 0;
                                            }
                                            else
                                            {
                                                ViewBag.AdministrationCheckData = 1;
                                            }
                                        }
                                        #endregion

                                        #region User Registration Code
                                        if (item.MenuName == "User Management")
                                        {
                                            foreach (var subitem in MenuRole)
                                            {
                                                if (item.MenuID == subitem.ParentMenuID)
                                                {
                                                    string menuname = subitem.MenuName;



                                                    if (menuname == "User Registration")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ClsUserMaster db1 = new ClsUserMaster();
                                                                        ViewBag.UserMakerMenuID = innitem.MenuID;
                                                                        ViewBag.UserIsMaker = db1.UserMaster_ListAll(0, 0, "", "", "", -1, CONT.Home_statusMaker1, false, "").Where(C => C.UserID != UserId).ToList();
                                                                        if (ViewBag.UserIsMaker.Count > 0)
                                                                        {
                                                                            a = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ClsUserMaster dbH = new ClsUserMaster();
                                                                        ViewBag.UserCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.UserIsChecker = dbH.UserMasterHistory_ListAllBind(0, 0, CONT.Home_statusChecker1, 0).Where(C => C.CustomerTempID == 0 && C.Status != CONT.User_Task_Checker).ToList();
                                                                        if (ViewBag.UserIsChecker.Count > 0)
                                                                        {
                                                                            a = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ClsUserMaster dbH = new ClsUserMaster();
                                                                        ViewBag.UserApproverMenuID = innitem.MenuID;
                                                                        ViewBag.UserIsApprover = dbH.UserMasterHistory_ListAllBind(0, 0, CONT.Home_statusApprover1, 0).Where(C => C.CustomerTempID == 0 && C.Status != CONT.User_Task_Approver).ToList();
                                                                        if (ViewBag.UserIsApprover.Count > 0)
                                                                        {
                                                                            a = 1;
                                                                        }
                                                                    }
                                                                }
                                                                if (subitem.IsView)
                                                                {

                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (menuname == "Role Management")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ClsRoleMaster rolemaster = new ClsRoleMaster();
                                                                        ViewBag.RoleMakerMenuID = innitem.MenuID;
                                                                        ViewBag.RoleIsMaker = rolemaster.RoleMaster_ListAll(0, "", -1, CONT.Home_statusMaker, false, "").ToList();
                                                                        if (ViewBag.RoleIsMaker.Count > 0)
                                                                        {
                                                                            a = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ClsRoleMaster rolemaster = new ClsRoleMaster();
                                                                        ViewBag.RoleCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.RoleIsChecker = rolemaster.RoleMasterProcessHistory_ListAllBind(0, 0, CONT.Home_statusChecker, 0).ToList();
                                                                        if (ViewBag.RoleIsChecker.Count > 0)
                                                                        {
                                                                            a = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ClsRoleMaster rolemaster = new ClsRoleMaster();
                                                                        ViewBag.RoleApproverMenuID = innitem.MenuID;
                                                                        ViewBag.RoleIsApprover = rolemaster.RoleMasterProcessHistory_ListAllBind(0, 0, CONT.Home_statusApprover, 0).ToList();
                                                                        if (ViewBag.RoleIsApprover.Count > 0)
                                                                        {
                                                                            a = 1;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if (a == 0)
                                                {
                                                    ViewBag.UserCheckData = 0;
                                                }
                                                else
                                                {
                                                    ViewBag.UserCheckData = 1;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region System Parameters Code
                                        if (item.MenuName == "System Settings")
                                        {

                                            int d = 0;
                                            foreach (var subitem in MenuRole)
                                            {
                                                if (item.MenuID == subitem.ParentMenuID)
                                                {
                                                    string menuname = subitem.MenuName;
                                                    if (menuname == "Document")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ClsDocumentMaster objDocumentMaster = new ClsDocumentMaster();
                                                                        ViewBag.DMMakerMenuID = innitem.MenuID;
                                                                        ViewBag.DMIsMaker = objDocumentMaster.DocumentMaster_ListAll(0, "", -1, -1, CONT.Home_statusMaker, false, "").ToList();

                                                                        if (ViewBag.DMIsMaker.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }

                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ClsDocumentMaster objDocumentMaster = new ClsDocumentMaster();
                                                                        ViewBag.DMCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.DMIsChecker = objDocumentMaster.DocumentMasterProcessHistory_ListAllBind(0, 0, CONT.Home_statusChecker, 0).ToList();

                                                                        if (ViewBag.DMIsChecker.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ClsDocumentMaster objDocumentMaster = new ClsDocumentMaster();
                                                                        ViewBag.DMApproverMenuID = innitem.MenuID;
                                                                        ViewBag.DMIsApprover = objDocumentMaster.DocumentMasterProcessHistory_ListAllBind(0, 0, CONT.Home_statusApprover, 0).ToList();
                                                                        if (ViewBag.DMIsApprover.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if (subitem.IsView)
                                                        {

                                                        }
                                                    }

                                                    if (menuname == "Template")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ClsHTMLTemplate dal = new ClsHTMLTemplate();
                                                                        ViewBag.TMMakerMenuID = innitem.MenuID;
                                                                        ViewBag.TMIsMaker = dal.HTMLTemplate_ListAll(0, "", -1, CONT.Home_statusMaker, false, "", 0).ToList();

                                                                        if (ViewBag.TMIsMaker.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }

                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ClsHTMLTemplate dbPH = new ClsHTMLTemplate();
                                                                        ViewBag.TMCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.TMIsChecker = dbPH.HTMLTemplateProcessHistory_ListAllBind_Result(0, 0, 0, CONT.Home_statusChecker, 0).ToList();

                                                                        if (ViewBag.TMIsChecker.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ClsHTMLTemplate dbPH = new ClsHTMLTemplate();
                                                                        ViewBag.TMApproverMenuID = innitem.MenuID;
                                                                        ViewBag.TMIsApprover = dbPH.HTMLTemplateProcessHistory_ListAllBind_Result(0, 0, 0, CONT.Home_statusApprover, 0).ToList();

                                                                        if (ViewBag.TMIsApprover.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (subitem.IsView)
                                                        {

                                                        }
                                                    }

                                                    if (menuname == "Fee")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Maker")
                                                                {
                                                                    if (innitem.IsMaker)
                                                                    {
                                                                        ClsFeeMaster objFeeMaster = new ClsFeeMaster();
                                                                        ViewBag.FeeMakerMenuID = innitem.MenuID;
                                                                        ViewBag.FeeMaker = objFeeMaster.FeeMaster_ListAll(0, "", -1, CONT.Home_statusMaker, false, "");
                                                                        if (ViewBag.FeeMaker.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        ClsFeeMaster objFeeMaster = new ClsFeeMaster();
                                                                        ViewBag.FeeCheckerMenuID = innitem.MenuID;
                                                                        ViewBag.FeeIsChecker = objFeeMaster.FeeMasterProcessHistory_ListAllBind1(0, 0, CONT.Document_Checker, 0);
                                                                        if (ViewBag.FeeIsChecker.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        ClsFeeMaster objFeeMaster = new ClsFeeMaster();
                                                                        ViewBag.FeeApproverMenuID = innitem.MenuID;
                                                                        ViewBag.FeeIsApprover = objFeeMaster.FeeMasterProcessHistory_ListAllBind1(0, 0, CONT.HTMLApprover, 0);
                                                                        if (ViewBag.FeeIsApprover.Count > 0)
                                                                        {
                                                                            d = 1;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (subitem.IsView)
                                                        {

                                                        }
                                                    }
                                                }
                                            }
                                            if (d == 0)
                                            {
                                                ViewBag.SParametersCheckData = 0;
                                            }
                                            else
                                            {
                                                ViewBag.SParametersCheckData = 1;
                                            }
                                        }

                                        #endregion



                                        #region Online Registration Code
                                        if (item.MenuName == "Registration")
                                        {
                                            int OR = 0;
                                            foreach (var subitem in MenuRole)
                                            {
                                                if (item.MenuID == subitem.ParentMenuID)
                                                {
                                                    string menuname = subitem.MenuName;
                                                    if (menuname == "Obligor")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Compliance Screening")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeIDs = CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID + "," + CONT.ObligorCustomerTypeID;
                                                                        _objModel.Status = CONT.ComplianceScreening_Status;
                                                                        ViewBag.Obl_CompScrn_MenuID = innitem.MenuID;
                                                                        ViewBag.Obl_CompScrn_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Obl_CompScrn_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Credit Review Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeIDs = CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID + "," + CONT.ObligorCustomerTypeID;
                                                                        _objModel.Status = CONT.CreditReviewChecker_Status;
                                                                        ViewBag.Obl_CrdtReview_MenuID = innitem.MenuID;
                                                                        ViewBag.Obl_CrdtReview_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Obl_CrdtReview_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Credit Review Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeIDs = CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID + "," + CONT.ObligorCustomerTypeID;
                                                                        _objModel.Status = CONT.CreditReviewApprover_Status;
                                                                        ViewBag.Obl_CrdtReviewApprover_MenuID = innitem.MenuID;
                                                                        ViewBag.Obl_CrdtReviewApprover_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Obl_CrdtReviewApprover_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Operations Team")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeIDs = CONT.BuyerCustomerTypeID + "," + CONT.BothObligorAndBuyerTypeID + "," + CONT.ObligorCustomerTypeID;
                                                                        _objModel.Status = CONT.OperationTeam_Status;
                                                                        ViewBag.Obl_OprTem_MenuID = innitem.MenuID;
                                                                        ViewBag.Obl_OprTem_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Obl_OprTem_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (menuname == "Supplier")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Compliance Screening")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeID = CONT.SupplierCustomerTypeID;
                                                                        _objModel.Status = CONT.ComplianceScreening_Status;
                                                                        ViewBag.Sup_CompScrn_MenuID = innitem.MenuID;
                                                                        ViewBag.Sup_CompScrn_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Sup_CompScrn_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Credit Review Checker")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeID = CONT.SupplierCustomerTypeID;
                                                                        _objModel.Status = CONT.CreditReviewChecker_Status;
                                                                        ViewBag.Sup_CrdtReview_MenuID = innitem.MenuID;
                                                                        ViewBag.Sup_CrdtReview_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Sup_CrdtReview_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Credit Review Approver")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeID = CONT.SupplierCustomerTypeID;
                                                                        _objModel.Status = CONT.CreditReviewApprover_Status;
                                                                        ViewBag.Sup_CrdtReviewApprover_MenuID = innitem.MenuID;
                                                                        ViewBag.Sup_CrdtReviewApprover_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Sup_CrdtReviewApprover_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                                if (innitem.MenuName == "Operations Team")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeID = CONT.SupplierCustomerTypeID;
                                                                        _objModel.Status = CONT.OperationTeam_Status;
                                                                        ViewBag.Sup_OprTem_MenuID = innitem.MenuID;
                                                                        ViewBag.Sup_OprTem_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Sup_OprTem_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (menuname == "Funder")
                                                    {
                                                        foreach (var innitem in MenuRole)
                                                        {
                                                            if (subitem.MenuID == innitem.ParentMenuID)
                                                            {
                                                                if (innitem.MenuName == "Compliance Screening")
                                                                {
                                                                    if (innitem.IsChecker)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeID = CONT.FunderCustomerTypeID;
                                                                        _objModel.Status = CONT.ComplianceScreening_Status;
                                                                        ViewBag.Fndr_CompScrn_MenuID = innitem.MenuID;
                                                                        ViewBag.Fndr_CompScrn_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Fndr_CompScrn_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }

                                                                if (innitem.MenuName == "Operations Team")
                                                                {
                                                                    if (innitem.IsApprover)
                                                                    {
                                                                        CustomerMasterModel _objModel = new CustomerMasterModel();
                                                                        ClsCustomerMaster _ClsCustomerMaster = new ClsCustomerMaster();
                                                                        _objModel.CustomerTypeID = CONT.FunderCustomerTypeID;
                                                                        _objModel.Status = CONT.OperationTeam_Status;
                                                                        ViewBag.Fndr_OprTem_MenuID = innitem.MenuID;
                                                                        ViewBag.Fndr_OprTem_Data = _ClsCustomerMaster.CustomerMaster_ListAll(_objModel);

                                                                        if (ViewBag.Fndr_CompScrn_Data.Count > 0)
                                                                        { OR = 1; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (OR == 0)
                                            {
                                                ViewBag.OnlineRegistration_CheckData = 0;
                                            }
                                            else
                                            {
                                                ViewBag.OnlineRegistration_CheckData = 1;
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    string errorMessage = FN.CreateErrorMessage(ex);
                    FN.LogFileWrite(errorMessage);
                    if (ex.InnerException != null)
                    {
                        ViewBag.ErrorMesssage = ex.InnerException.Message;
                    }
                    else
                    {
                        ViewBag.ErrorMesssage = ex.Message;
                    }
                }
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();
        }
        public string RedirectToPageUrl(string MenuID)
        {
            Session["MenuID"] = null;
            Session["MenuID"] = MenuID;
            return "Success";
        }
        public ActionResult FactoringTabs()
        {
            return View();
        }
        public ActionResult About()
        {
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
                try
                {
                    int LoginUserId = 0;
                    int.TryParse(LoginStatus[1].ToString(), out LoginUserId);
                    ClsHTMLTemplate dbHT = new ClsHTMLTemplate();
                    var TempText = dbHT.HTMLTemplate_ListAll(0, CONT.About_TGS_Platform, 1, "", false, "", 0).FirstOrDefault();
                    ViewBag.AboutUSContant = TempText.HtmlText;

                }
                catch (Exception ex)
                {
                    string errorMessage = FN.CreateErrorMessage(ex);
                    FN.LogFileWrite(errorMessage);
                    if (ex.InnerException != null)
                    {
                        ViewBag.ErrorMsg = ex.InnerException.Message;
                    }
                    else
                    {
                        ViewBag.ErrorMsg = ex.Message;
                    }
                    ViewBag.AboutUSContant = null;
                }
                return View();
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }

        }

        public ActionResult Contact()
        {
            System.Threading.Thread.Sleep(5000);
            ContactUsModel _ObjModel = new ContactUsModel();

            return View(_ObjModel);
        }
        [HttpPost]
        public ActionResult Contact(ContactUsModel _ObjModel)
        {
            ClsContactUs _ClsContactUs = new ClsContactUs();
            try
            {
                _ClsContactUs.Conn = ClsAppDatabase.GetCon();
                if (_ClsContactUs.Conn.State == ConnectionState.Closed)
                { _ClsContactUs.Conn.Open(); }
                else { _ClsContactUs.Conn.Close(); _ClsContactUs.Conn.Open(); }
                _ClsContactUs.Tras = _ClsContactUs.Conn.BeginTransaction();

                _ObjModel.ContactID = _ClsContactUs.ContactDetails_Add(_ObjModel);


                _ClsContactUs.Tras.Commit();
                _ClsContactUs.Conn.Close();

                DataTable DT = new DataTable();
                DT = _ClsContactUs.ContactDetails_ListAllTable(_ObjModel);
                sendNotificationToUser(DT, CONT.ContactUs);
                sendNotificationToAdmin(DT, CONT.ContactDetails);

                ViewBag.PopupMsg = true;
                ModelState.Clear();
                return View(new ContactUsModel());
            }
            catch (Exception ex)
            {
                _ClsContactUs.Tras.Rollback();
                _ClsContactUs.Conn.Close();
                string errorMessage = FN.CreateErrorMessage(ex);
                FN.LogFileWrite(errorMessage);
                if (ex.InnerException == null) { ViewBag.ErrorMesssage = ex.Message; } else { ViewBag.ErrorMesssage = ex.InnerException.Message; }
            }
            return View(_ObjModel);
        }
        public ActionResult FAQs()
        {
            ClsFAQ dbfaq = new ClsFAQ();
            List<FAQ> objfaq = new List<FAQ>();
            string[] LoginStatus = FN.Checkcredentials();
            if (!string.IsNullOrEmpty(LoginStatus[0]) && LoginStatus[0] == "pass")
            {
                try
                {
                    int CustomerTypeID = 0;
                    if (Session["CustomerTypeID"] != null)
                    {
                        int.TryParse(Convert.ToString(Session["CustomerTypeID"]), out CustomerTypeID);
                    }
                    int LoginUserId = 0;
                    int.TryParse(LoginStatus[1].ToString(), out LoginUserId);
                    ViewBag.objfaq = dbfaq.FaqMaster_ListAll(0, CustomerTypeID, 1, "", false, "").ToList();
                    if (ViewBag.objfaq.Count == 0)
                    {
                        ViewBag.ErrorMsg = "No data available";
                    }
                    return View(ViewBag.objfaq);
                }
                catch (Exception ex)
                {
                    string errorMessage = FN.CreateErrorMessage(ex);
                    FN.LogFileWrite(errorMessage);
                    if (ex.InnerException != null)
                    {
                        ViewBag.ErrorMsg = ex.InnerException.Message;
                    }
                    else
                    {
                        ViewBag.ErrorMsg = ex.Message;
                    }
                }
            }
            else
            {
                return RedirectToAction("Login", "mUserMasters");
            }
            return View();
        }
        public ActionResult ChangeProfilePicture()
        {
            return PartialView();
        }
        [HttpPost]
        public ActionResult ChangeProfilePicture(HttpPostedFileBase file)
        {
            if (!string.IsNullOrEmpty(Convert.ToString(file)))
            {
                string userId = Convert.ToString(Session["UserID"]);
                string completePath = Server.MapPath(defaultPath + userId + Path.GetExtension(file.FileName));
                Session["ImgPath"] = null;
                file.SaveAs(completePath);
                Image originalImg = Image.FromFile(completePath);
                Image actualImg = Scale(originalImg);
                originalImg.Dispose();
                actualImg.Save(completePath);
                actualImg.Dispose();
                ClsUserMaster db = new ClsUserMaster();
                Function fn = new Function();
                db.UserMaster_ProfilePictureUpdate(userId, file.FileName, 1, fn.GetSystemIP());
                return RedirectToAction("CMNDashboard", "Home");
            }
            return PartialView();
        }
        private Image Scale(Image imgPhoto)
        {
            float sourceWidth = imgPhoto.Width;
            float sourceHeight = imgPhoto.Height;
            float destHeight = 0;
            float destWidth = 0;
            int sourceX = 0;
            int sourceY = 0;
            int destX = 0;
            int destY = 0;
            int Width = 40;
            int Height = 40;

            if (Width != 0 && Height != 0)
            {
                destWidth = Width;
                destHeight = Height;
            }
            else if (Height != 0)
            {
                destWidth = (float)(Height * sourceWidth) / sourceHeight;
                destHeight = Height;
            }
            else
            {
                destWidth = Width;
                destHeight = (float)(sourceHeight * Width / sourceWidth);
            }

            Bitmap bmPhoto = new Bitmap((int)destWidth, (int)destHeight,
                                        System.Drawing.Imaging.PixelFormat.Format32bppPArgb);
            bmPhoto.SetResolution(imgPhoto.HorizontalResolution, imgPhoto.VerticalResolution);

            Graphics grPhoto = Graphics.FromImage(bmPhoto);
            grPhoto.InterpolationMode = InterpolationMode.HighQualityBicubic;

            grPhoto.DrawImage(imgPhoto,
                new Rectangle(destX, destY, (int)destWidth, (int)destHeight),
                new Rectangle(sourceX, sourceY, (int)sourceWidth, (int)sourceHeight),
                GraphicsUnit.Pixel);

            grPhoto.Dispose();

            return bmPhoto;
        }
        public ActionResult ErrorPage()
        {
            return View();
        }
        public ActionResult UserDashboard(int CustomerID = 0)
        {
            return View();
        }
        public string _RightsNoaccessPage()
        {
            string MenuId = Convert.ToString(Session["MenuID"]);
            int ParentMenuID = 0;
            int.TryParse(MenuId, out ParentMenuID);
            var UserRight = FN.CheckUserRight("", "", ParentMenuID);
            if (UserRight != null)
            {
                return UserRight.MenuName;
            }
            else
            { return null; }
        }
        public string _currentStatus(string ProgramType = "")
        {
            string _status = "";
            int CustomerTypeID = Convert.ToInt32(Session["onlineCustomerTypeID"]);
            InvoiceTransactionModel _objModel = new InvoiceTransactionModel();
            _objModel.UserID = Convert.ToInt32(Session["UserID"]);
            var UserRight = _clsInvoi.UserRole_GetDetail(_objModel).FirstOrDefault();

            if (UserRight != null)
            {


                if ((UserRight.IsMaker == true && UserRight.IsChecker == true))
                {
                    if (CustomerTypeID == CONT.SupplierCustomerTypeID)
                    {
                        _status = CONT.supplier_Maker_Action + ',' + CONT.supplier_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.ServiceProviderCustomerTypeID)
                    {
                        _status = CONT.iscf_Maker_Action + ',' + CONT.iscf_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.ObligorCustomerTypeID)
                    {
                        _status = CONT.obligor_Maker_Action + ',' + CONT.obligor_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.InsuranceProviderTypeID || CustomerTypeID == CONT.InsuranceBrokerTypeID)
                    {
                        _status = CONT.insurance_Maker_Action + ',' + CONT.insurance_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.FunderCustomerTypeID)
                    {
                        _status = CONT.funder_Maker_Action + ',' + CONT.funder_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.BuyerCustomerTypeID)
                    {
                        _status = CONT.buyer_Maker_Action + ',' + CONT.buyer_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.BothObligorAndBuyerTypeID)
                    {
                        _status = CONT.both_Maker_Action + ',' + CONT.both_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.PayableSupplierCustomerTypeID)
                    {
                        _status = "SK1,SL1";
                    }

                }
                else if ((UserRight.IsMaker == true && UserRight.IsChecker == false))
                {
                    if (CustomerTypeID == CONT.SupplierCustomerTypeID)
                    {
                        _status = CONT.supplier_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.ServiceProviderCustomerTypeID)
                    {
                        _status = CONT.iscf_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.ObligorCustomerTypeID)
                    {
                        _status = CONT.obligor_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.InsuranceProviderTypeID || CustomerTypeID == CONT.InsuranceBrokerTypeID)
                    {
                        _status = CONT.insurance_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.FunderCustomerTypeID)
                    {
                        _status = CONT.funder_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.BuyerCustomerTypeID)
                    {
                        _status = CONT.buyer_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.BothObligorAndBuyerTypeID)
                    {
                        _status = CONT.both_Maker_Action;
                    }
                    else if (CustomerTypeID == CONT.PayableSupplierCustomerTypeID)
                    {
                        _status = "SK1";
                    }

                }
                else if ((UserRight.IsMaker == false && UserRight.IsChecker == true))
                {
                    if (CustomerTypeID == CONT.SupplierCustomerTypeID)
                    {
                        _status = CONT.supplier_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.ServiceProviderCustomerTypeID)
                    {
                        _status = CONT.iscf_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.ObligorCustomerTypeID)
                    {
                        _status = CONT.obligor_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.InsuranceProviderTypeID || CustomerTypeID == CONT.InsuranceBrokerTypeID)
                    {
                        _status = CONT.insurance_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.FunderCustomerTypeID)
                    {
                        _status = CONT.funder_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.BuyerCustomerTypeID)
                    {
                        _status = CONT.buyer_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.BothObligorAndBuyerTypeID)
                    {
                        _status = CONT.both_Checker_Action;
                    }
                    else if (CustomerTypeID == CONT.PayableSupplierCustomerTypeID)
                    {
                        _status = "SL1";
                    }
                }

            }

            return _status;
        }
        public string _currentStatusAll(string ProgramType = "")
        {
            string _status = "";
            int CustomerTypeID = Convert.ToInt32(Session["onlineCustomerTypeID"]);
            InvoiceTransactionModel _objModel = new InvoiceTransactionModel();
            _objModel.UserID = Convert.ToInt32(Session["UserID"]);
            var UserRight = _clsInvoi.UserRole_GetDetail(_objModel).FirstOrDefault();

            if (UserRight != null)
            {

                if ((UserRight.IsMaker == true && UserRight.IsChecker == true && UserRight.IsViewer == true) ||
                (UserRight.IsMaker == true && UserRight.IsChecker == false && UserRight.IsViewer == true) || (UserRight.IsMaker == true && UserRight.IsChecker == false && UserRight.IsViewer == false) ||
                (UserRight.IsMaker == false && UserRight.IsChecker == false && UserRight.IsViewer == true) || (UserRight.IsMaker == true && UserRight.IsChecker == true && UserRight.IsViewer == false))
                {
                    if (CustomerTypeID == CONT.SupplierCustomerTypeID)
                    {
                        _status = CONT.Supplier_Maker;
                    }
                    else if (CustomerTypeID == CONT.ServiceProviderCustomerTypeID)
                    {
                        _status = CONT.Iscf_Maker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.ObligorCustomerTypeID)
                    {
                        _status = CONT.Obligor_Maker;
                    }
                    else if (CustomerTypeID == CONT.InsuranceProviderTypeID || CustomerTypeID == CONT.InsuranceBrokerTypeID)
                    {
                        _status = CONT.Insurance_Maker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.FunderCustomerTypeID)
                    {
                        _status = CONT.Funder_Maker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.BuyerCustomerTypeID)
                    {
                        _status = CONT.Buyer_Maker;
                    }
                    else if (CustomerTypeID == CONT.BothObligorAndBuyerTypeID)
                    {
                        _status = CONT.Buyer_Maker + ',' + CONT.Supplier_Maker;
                    }

                }
                else if ((UserRight.IsMaker == false && UserRight.IsChecker == true && UserRight.IsViewer == true) ||
                (UserRight.IsMaker == false && UserRight.IsChecker == true && UserRight.IsViewer == false) ||
                (UserRight.IsMaker == true && UserRight.IsChecker == true && UserRight.IsViewer == false))
                {
                    if (CustomerTypeID == CONT.SupplierCustomerTypeID)
                    {
                        _status = CONT.Supplier_Checker;
                    }
                    else if (CustomerTypeID == CONT.ServiceProviderCustomerTypeID)
                    {
                        _status = CONT.Iscf_Checker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.ObligorCustomerTypeID)
                    {
                        _status = CONT.Obligor_Checker;
                    }
                    else if (CustomerTypeID == CONT.InsuranceProviderTypeID || CustomerTypeID == CONT.InsuranceBrokerTypeID)
                    {
                        _status = CONT.Insurance_Checker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.FunderCustomerTypeID)
                    {
                        _status = CONT.Funder_Maker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.FunderCustomerTypeID)
                    {
                        _status = CONT.Funder_Checker_Dashboard;
                    }
                    else if (CustomerTypeID == CONT.BuyerCustomerTypeID)
                    {
                        _status = CONT.Buyer_Checker;
                    }
                    else if (CustomerTypeID == CONT.BothObligorAndBuyerTypeID)
                    {
                        _status = CONT.Buyer_Checker + ',' + CONT.Supplier_Checker;
                    }
                }
            }

            return _status;
        }
        protected void sendNotificationToUser(DataTable DT, string tempName = "")
        {
            string sub = ""; string toMail = ""; int UserID = 0;
            toMail = Convert.ToString(DT.Rows[0]["EmailID"]);
            FN.GetMasterData(tempName, DT, toMail, sub, "", UserID);
        }
        protected void sendNotificationToAdmin(DataTable DT, string tempName = "")
        {
            string sub = ""; string toMail = ""; 
            toMail = Convert.ToString(WebConfigurationManager.AppSettings["AdminSupportEmail"]);
            FN.GetMasterData(tempName, DT, toMail, sub);
        }
    }
}